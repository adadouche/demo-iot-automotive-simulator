AWSTemplateFormatVersion: 2010-09-09
Description: AWS IoT Automotive Demo - CARLA Simulator Ubuntu with NICE DCV Using Unicast (login as ubuntu)
Metadata:
  License:
    Description: |
      Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. SPDX-License-Identifier: MIT-0
      Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so.
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Carla Simulator Instance configuration
        Parameters:
          - Ec2InstanceName
          - ImageId
          - InstanceType
          - Ec2InstanceVolumeSize
          - Ec2InstanceVolumeType
      - Label:
          default: Biga Instance configuration
        Parameters:
          - BigaAmiId
          - BigaInstanceName
          - BigaInstanceType
      - Label:
          default: Other Parameters
        Parameters:
          - AllowedIP
          - CarlaVersion
Parameters:
  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: Ubuntu 20.04 (x86_64)
    Default: /aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id
  InstanceType:
    Type: String
    Description: Accelerated Instance Type ( https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/accelerated-computing-instances.html )
    AllowedValues:
      - g4dn.xlarge
      - g4dn.2xlarge
      - g4dn.4xlarge
      - g4dn.8xlarge
      - g4dn.12xlarge
      - g4dn.16xlarge
      - g5.xlarge
      - g5.2xlarge
      - g5.4xlarge
      - g5.8xlarge
      - g5.12xlarge
      - g5.16xlarge
    ConstraintDescription: Must contain valid instance type.
    Default: g5.16xlarge
  Ec2InstanceName:
    Description: Name of the EC2 instance hosting the Carla Simulator.
    Type: String
    Default: Ubuntu-CARLA-NICE-DCV
  Ec2InstanceVolumeType:
    Type: String
    Description: Volume Type ( https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html )
    AllowedValues:
      - gp2
      - gp3
    Default: gp3
  Ec2InstanceVolumeSize:
    Type: Number
    Description: Volume Size in GiBs (must be equal or larger than snapshot size)
    Default: 40
  BigaAmiId:
    Type: AWS::EC2::Image::Id
    Description: The Biga ami image id
  BigaInstanceType:
    Type: String
    Description: Instance type for the biga image
    Default: t4g.micro
  BigaInstanceName:
    Type: String
    Description: Name of Biga Instance
    Default: Biga
  AllowedIP:
    Type: String
    Description: Allowed IP address to connect to CARLA/Biga via Security Group on port 8443
  CarlaVersion:
    Type: String
    Description: The Carla simulator version to be downloaded and installed
    Default: 0.9.13
  RepositoryURL:
    Type: String
    Description: The demo-iot-automotive-simulator github repository URL
    Default: https://github.com/aws4embeddedlinux/demo-iot-automotive-simulator
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - Biga VPC"
  VPCPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref VPC
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - Biga VPC Private Subnet 1"
  VPCPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      VpcId: !Ref VPC
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - Biga VPC Private Subnet 2"
  VPCPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [2, !GetAZs ""]
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - Biga VPC Public Subnet"
  VPCInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - Biga VPC Internet Gateway"
  VPCInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref VPCInternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - Biga VPC Public Route Table"
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPCInternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref VPCPublicSubnet
  NatIP:
    Type: AWS::EC2::EIP
    DependsOn: VPC
    Properties:
      Domain: VPC
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatIP.AllocationId
      SubnetId: !Ref VPCPublicSubnet
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - Biga VPC Private Route Table"
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPCPrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPCPrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  BigaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Traffic From/To Carla & Biga instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: SSH
          FromPort: "22"
          ToPort: "22"
          CidrIp: 10.0.0.0/16
        - IpProtocol: udp
          Description: Ingress traffic (UDP) for ROS2
          FromPort: '7400'
          ToPort: '65400'
          CidrIp: 10.0.0.0/16
        - IpProtocol: udp
          Description: vCAN
          FromPort: '3030'
          ToPort: '3030'
          CidrIp: 10.0.0.0/16
        - IpProtocol: 2
          Description: IGMP Querier
          CidrIp: 0.0.0.0/32
        - IpProtocol: tcp
          Description: tcp 8443
          FromPort: "8443"
          ToPort: "8443"
          CidrIp: !Ref AllowedIP
        - IpProtocol: udp
          Description: udp 8443
          FromPort: "8443"
          ToPort: "8443"
          CidrIp: !Ref AllowedIP
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - Biga Security Group"

  Ec2InstanceCarlaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: dcvLicensing
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub arn:${AWS::Partition}:s3:::dcv-license.${AWS::Region}/*
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}

  Ec2InstanceCarlaProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Ec2InstanceCarlaIamRole

  Ec2InstanceCarlaNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref VPCPublicSubnet
      Description: "Network interface for Ec2InstanceCarla"
      GroupSet:
        - !Ref BigaSecurityGroup

  Ec2InstanceBigaNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref VPCPublicSubnet
      Description: "Network interface for Ec2InstanceBiga"
      GroupSet:
        - !Ref BigaSecurityGroup

  Ec2InstanceCarlaSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: Simple secret created by AWS CloudFormation for the Ec2InstanceCarla.
      GenerateSecretString:
        SecretStringTemplate: '{"username": "ubuntu"}'
        GenerateStringKey: password
        PasswordLength: 32

  Ec2InstanceCarla:
    Type: AWS::EC2::Instance
    DependsOn: Ec2InstanceCarlaSecret
    CreationPolicy:
      ResourceSignal:
        Timeout: PT90M
    Metadata:
      Comment: Install Desktop Environment
      AWS::CloudFormation::Init:
        # we could have used a single config set, but then commands will be executed alphabetically
        configSets:
          default:
            - base-install
            - awscli-install
            - nvidia-install
            - dcv-install-prerequisites
            - dcv-install
            - dcv-configure
            - carla-install
            - ros2-install
            - canigen-install
            - breeze-install
            - socketcan-install
            - firefox-install
            - finalize-install
        base-install:
          commands:
            base-install:
              ignoreErrors: "false"
              command: |
                add-apt-repository ppa:deadsnakes/ppa -y
                apt-get update
                apt-get -q -y install python3
                apt-get -q -y install python3-dev
                apt-get -q -y install python3-venv
                apt-get -q -y install python3-distutils
                apt-get -q -y install python3-pip
                apt-get -q -y install python3-setuptools
                apt-get -q -y install python-is-python3
                apt-get -q -y install locales
                apt-get -q -y install software-properties-common
                apt-get -q -y install wget
                apt-get -q -y install tmux
                apt-get -q -y install unzip
                apt-get -q -y install tar
                apt-get -q -y install curl
                apt-get -q -y install sed
        awscli-install:
          commands:
            awscli-install:
              ignoreErrors: "false"
              command: |
                cd /tmp
                rm -f /tmp/awscliv2.zip
                if (uname -a | grep x86 1>/dev/null); then
                  curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
                else
                  curl https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip -o awscliv2.zip
                fi
                unzip -q -o awscliv2.zip
                ./aws/install --update -b /usr/bin

                rm -f /tmp/awscliv2.zip
                echo "export AWS_CLI_AUTO_PROMPT=on-partial" >> /home/ubuntu/.bashrc
        nvidia-install:
          commands:
            nvidia-install:
              ignoreErrors: "false"
              command: |
                # Nvidia Drivers
                apt-get -q -y install ubuntu-drivers-common
                apt-get -q -y install $(nvidia-detector)

                nvidia-xconfig --preserve-busid --enable-all-gpus
        dcv-install-prerequisites:
          commands:
            dcv-install-prerequisites:
              ignoreErrors: "false"
              command: |
                # https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-prereq.html
                systemctl isolate graphical.target
                systemctl set-default graphical.target

                apt-get -q -y install ubuntu-desktop
                apt-get -q -y install gdm3
                apt-get -q -y install pulseaudio-utils
                apt-get -q -y install libssl1.1
                apt-get -q -y install mesa-utils
                apt-get -q -y install xserver-xorg-video-dummy

                # resolve "/var/lib/dpkg/info/nice-dcv-server.postinst: 8: dpkg-architecture: not found" when installing dcv-server
                apt-get -q -y install dpkg-dev

                pip3 install crudini
                crudini --set /etc/gdm3/custom.conf "daemon" "WaylandEnable" "false"

                # systemctl stop gdm3
                # systemctl start gdm3

                # rm -rf /etc/X11/XF86Config*

                systemctl isolate multi-user.target && systemctl isolate graphical.target
        dcv-install:
          commands:
            dcv-install:
              ignoreErrors: "false"
              command: |
                cd /tmp

                # https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-server.html
                wget -nv https://d1uj6qtbmh3dt5.cloudfront.net/NICE-GPG-KEY
                gpg --import NICE-GPG-KEY  

                # https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-server.html#linux-server-install

                rm -f /tmp/nice-dcv-*.tgz
                if ((uname -a | grep x86 1>/dev/null) && (cat /etc/os-release | grep 22.04 1>/dev/null)); then
                  wget -nv https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-ubuntu2204-x86_64.tgz
                  tar -xvzf nice-dcv-ubuntu*.tgz && cd nice-dcv-*-x86_64
                elif ((uname -a | grep x86 1>/dev/null) && (cat /etc/os-release | grep 18.04 1>/dev/null)); then
                  wget -nv https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-ubuntu1804-x86_64.tgz
                  tar -xvzf nice-dcv-ubuntu*.tgz && cd nice-dcv-*-x86_64
                elif (cat /etc/os-release | grep 18.04 1>/dev/null); then
                  wget -nv https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-ubuntu1804-aarch64.tgz
                  tar -xvzf nice-dcv-ubuntu*.tgz && cd nice-dcv-*-aarch64
                else
                  wget -nv https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-ubuntu2004-x86_64.tgz
                  tar -xvzf nice-dcv-ubuntu*.tgz && cd nice-dcv-*-x86_64
                fi

                apt-get -q -y install ./nice-dcv-server_*.deb
                apt-get -q -y install ./nice-dcv-web-viewer_*.deb
                usermod -aG video dcv
                apt-get -q -y install ./nice-xdcv_*.deb

                # dcvstartx &
                # pkill dcvstartx
        dcv-configure:
          commands:
            dcv-configure:
              ignoreErrors: "false"
              command: |
                pip3 install crudini

                systemctl stop dcvserver

                cp /etc/dcv/dcv.conf /etc/dcv/dcv.conf.original

                # https://docs.aws.amazon.com/dcv/latest/adminguide/enable-quic.html
                crudini --set /etc/dcv/dcv.conf "security" "no-tls-strict" "true"

                crudini --set /etc/dcv/dcv.conf "connectivity" "enable-quic-frontend" "false"
                # crudini --set /etc/dcv/dcv.conf "connectivity" "enable-datagrams-display" "always-off"

                crudini --set /etc/dcv/dcv.conf "connectivity" "quic-listen-endpoints" "['0.0.0.0:8443', '[::]:8443']"
                crudini --set /etc/dcv/dcv.conf "connectivity" "quic-port" "8443"
                crudini --set /etc/dcv/dcv.conf "connectivity" "web-listen-endpoints" "['0.0.0.0:8443', '[::]:8443']"
                crudini --set /etc/dcv/dcv.conf "connectivity" "web-port" "8443"

                # crudini --set /etc/dcv/dcv.conf "session-management" "create-session" "false"
                # crudini --set /etc/dcv/dcv.conf "session-management/automatic-console-session" "owner" "ubuntu"

                # session storage: https://docs.aws.amazon.com/dcv/latest/userguide/using-transfer.html
                mkdir -p /home/ubuntu/DCV-Storage
                chown -R ubuntu:ubuntu /home/ubuntu/DCV-Storage

                # https://docs.aws.amazon.com/dcv/latest/adminguide/managing-sessions-start.html#managing-sessions-start-manual
                tee /opt/dcv-virtual-session.sh > /dev/null << EOF
                #!/bin/bash
                dcvUser=ubuntu
                while true;
                do
                  if (/usr/bin/dcv list-sessions | grep \$dcvUser 1>/dev/null)
                  then
                    sleep 5
                  else
                    /usr/bin/dcv create-session demo --owner \$dcvUser --storage-root /home/\$dcvUser/DCV-Storage --type=virtual 
                    /usr/bin/dcv list-sessions
                  fi
                done
                EOF

                tee /etc/systemd/system/dcv-virtual-session.service > /dev/null << EOF
                [Unit]
                Description=Create DCV virtual session for user ubuntu
                After=default.target network.target
                [Service]
                ExecStart=/opt/dcv-virtual-session.sh
                [Install]
                WantedBy=default.target
                EOF

                chmod +x /opt/dcv-virtual-session.sh

                # text console: DCV virtual sessions only
                systemctl daemon-reload
                systemctl enable --now dcvserver
                systemctl enable --now dcv-virtual-session

                systemctl stop dcvserver
                systemctl stop dcv-virtual-session

                systemctl restart dcvserver
                systemctl restart dcv-virtual-session

                systemctl status dcvserver
                systemctl status dcv-virtual-session
        carla-install:
          commands:
            carla-install:
              ignoreErrors: "false"
              command: !Sub
                - |
                  apt-get -q -y install libomp5
                  apt-get -q -y install can-utils
                  apt-get -q -y install socat
                  apt-get -q -y install linux-modules-extra-$(uname -r)

                  export CARLA_VERSION=${CARLA_VERSION}

                  mkdir -p /opt/carla-simulator/
                  cd /opt/carla-simulator/
                  wget https://carla-releases.s3.us-east-005.backblazeb2.com/Linux/CARLA_$CARLA_VERSION.tar.gz
                  tar -xzvf /opt/carla-simulator/CARLA_*.tar.gz -C /opt/carla-simulator/

                  python -m pip install --upgrade pip
                  python -m pip install --ignore-installed carla==$CARLA_VERSION
                  python -m pip install --ignore-installed -r /opt/carla-simulator/PythonAPI/examples/requirements.txt

                  # chmod -R a+rwx /opt/carla-simulator

                  chown -R "ubuntu:ubuntu" /opt/carla-simulator
                - CARLA_VERSION: !Ref CarlaVersion
        ros2-install:
          commands:
            ros2-install:
              ignoreErrors: "false"
              command: !Sub
                - |
                  CARLA_VERSION=${CARLA_VERSION}

                  locale-gen en_US en_US.UTF-8
                  update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
                  export LANG=en_US.UTF-8

                  add-apt-repository universe
                  curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
                  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null

                  apt-get update

                  apt-get -q -y install ros-galactic-desktop
                  apt-get -q -y install ros-dev-tools

                  apt-get -q -y install python3-rosdep2
                  apt-get -q -y install python3-colcon-common-extensions

                  export CARLA_ROOT=/opt/carla-simulator/
                  export PYTHONPATH=$PYTHONPATH:$CARLA_ROOT/PythonAPI/carla/dist/carla-$CARLA_VERSION-py3.7-linux-x86_64.egg:$CARLA_ROOT/PythonAPI/carla
                  source /opt/ros/galactic/setup.bash

                  mkdir -p /home/ubuntu/ros2_ws/src 
                  cd /home/ubuntu/ros2_ws/src
                  git clone https://github.com/astuff/astuff_sensor_msgs.git

                  cd /home/ubuntu/ros2_ws
                  colcon build --symlink-install
                  source /home/ubuntu/ros2_ws/install/setup.bash
                  rosdep install --from-paths src --ignore-src -r -y

                  cd /home/ubuntu/ros2_ws/src
                  git clone https://github.com/carla-simulator/ros-bridge.git ros-bridge
                  cd /home/ubuntu/ros2_ws/src/ros-bridge
                  git submodule update --init --recursive

                  rosdep update

                  cd /home/ubuntu/ros2_ws
                  rosdep install --from-paths src --ignore-src -r -y
                  colcon build --symlink-install

                  chown -R "ubuntu:ubuntu" /home/ubuntu/ros2_ws
                - CARLA_VERSION: !Ref CarlaVersion
        socketcan-install:
          commands:
            ros2-install:
              ignoreErrors: "false"
              command: !Sub
                - |
                  # cloning the repository
                  mkdir -p /home/ubuntu/
                  cd /home/ubuntu/Desktop
                  git clone ${REPO_URL}

                  cd /home/ubuntu/Desktop/demo-iot-automotive-simulator/socket-can-setup
                  sudo cp setup-socketcan.sh /usr/bin
                  sudo cp setup-socketcan.service /lib/systemd/system

                  systemctl start setup-socketcan
                  systemctl enable setup-socketcan

                  chown -R "ubuntu:ubuntu" /home/ubuntu/Desktop

                - REPO_URL: !Ref RepositoryURL
        breeze-install:
          commands:
            carla-install:
              ignoreErrors: "false"
              command: |
                apt-get -q -y install python3-pyqt5  
                apt-get -q -y install pyqt5-dev-tools
                apt-get -q -y install qttools5-dev-tools

        canigen-install:
          commands:
            carla-install:
              ignoreErrors: "false"
              command: |
                python -m pip install --ignore-installed cantools                 
                python -m pip install --ignore-installed prompt_toolkit
                python -m pip install --ignore-installed python-can
                python -m pip install --ignore-installed can-isotp  
        firefox-install:
          commands:
            firefox-install:
              ignoreErrors: "false"
              command: |
                # install firefox browser
                apt-get -q -y install firefox
        finalize-install:
          commands:
            finalize-install:
              ignoreErrors: "false"
              command: !Sub
                - |
                  # remove unsued package
                  apt-get -y autoremove

                  # check all process are running
                  ps -edf | grep dcv

                  # change the ubuntu user password using the secret
                  echo "ubuntu:${PASSWORD}" | sudo chpasswd

                - PASSWORD: "{{resolve:secretsmanager:Ec2InstanceCarlaSecret:SecretString:password}}"
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref Ec2InstanceCarlaProfile
      Monitoring: true
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref Ec2InstanceCarlaNetworkInterface
          DeviceIndex: "0"
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: !Ref Ec2InstanceVolumeType
            VolumeSize: !Ref Ec2InstanceVolumeSize
            DeleteOnTermination: true
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] UserData -> start" >> ~/my-cfn-init.log > ~/my-cfn-init.log

          echo "[$(date '+%Y-%m-%d %H:%M:%S')] UserData -> install python -> start" >> ~/my-cfn-init.log
          # https://stackoverflow.com/questions/33370297/apt-get-update-non-interactive
          export DEBIAN_FRONTEND=noninteractive
          add-apt-repository ppa:deadsnakes/ppa -y
          apt-get update
          apt-get -q -y install python3 python3-dev python3-venv python3-distutils python3-pip python3-setuptools python-is-python3
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] UserData -> install python -> done" >> ~/my-cfn-init.log
              
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] UserData -> install cfn-bootstrap -> start" >> ~/my-cfn-init.log
          cd /tmp
          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/releasehistory-aws-cfn-bootstrap.html
          wget -nv https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-2.0-31.tar.gz
          tar -xvzf ./aws-cfn-bootstrap-py*
          cd aws-cfn-bootstrap-2.0
          python3 setup.py build
          python3 setup.py install
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] UserData -> install cfn-bootstrap -> done" >> ~/my-cfn-init.log

          echo "[$(date '+%Y-%m-%d %H:%M:%S')] UserData -> call cfn-init -> start" >> ~/my-cfn-init.log
          # cfn-init
          cfn-init -v --stack ${AWS::StackName} --resource Ec2InstanceCarla --region ${AWS::Region} -c default
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] UserData -> call cfn-init -> done" >> ~/my-cfn-init.log


          echo "[$(date '+%Y-%m-%d %H:%M:%S')] UserData -> call cfn-signal -> start" >> ~/my-cfn-init.log
          # cfn-init completed so signal success or not
          cfn-signal -e $? --stack ${AWS::StackName} --resource Ec2InstanceCarla --region ${AWS::Region}
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] UserData -> call cfn-signal -> done" >> ~/my-cfn-init.log

          echo "[$(date '+%Y-%m-%d %H:%M:%S')] UserData -> done" >> ~/my-cfn-init.log
          reboot
      Tags:
        - Key: Name
          Value: !Ref Ec2InstanceName
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}

  Ec2InstanceBiga:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref BigaAmiId
      InstanceType: !Ref BigaInstanceType
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref Ec2InstanceBigaNetworkInterface
          DeviceIndex: "0"
      Tags:
        - Key: Name
          Value: !Ref BigaInstanceName
Outputs:
  CarlaSimulatorInstanceID:
    Description: Carla Simulator EC2 Instance ID
    Value: !Ref Ec2InstanceCarla
  CarlaSimulatorSecret:
    Description: Carla Simulator OS user & password secret
    Value: !Ref Ec2InstanceCarlaSecret
  SSMSessionManagerURL:
    Description: SSM Session Manager access link
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${Ec2InstanceCarla}
  NICEDCVWebAccessConsoleURL:
    Description: NICE DCV Web Access Console
    # Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager:8443
    Value: !Join
      - ""
      - - "https://"
        - !GetAtt
          - Ec2InstanceCarla
          - PublicDnsName
        - :8443
  NICEDCVClientConnectionString:
    Description: NICE DCV Client Connection String
    Value: !Join
      - ""
      - - !GetAtt
          - Ec2InstanceCarla
          - PublicDnsName
        - :8443
  NICEDCVClientDownloadURL:
    Description: DCV client download
    Value: https://download.nice-dcv.com
  CARLApath:
    Description: CARLA installation target path
    Value: /opt/carla-simulator/
