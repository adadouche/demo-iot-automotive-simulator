AWSTemplateFormatVersion: 2010-09-09
Description: AWS IoT Automotive Demo - CARLA Simulator Ubuntu with NICE DCV Using MultiCast (login as ubuntu)
Metadata:
  License:
    Description: |
      Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. SPDX-License-Identifier: MIT-0
      Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so.
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Carla Simulator Instance configuration
        Parameters:
          - Ec2InstanceName
          - ImageId
          - InstanceType
          - Ec2InstanceVolumeSize
          - Ec2InstanceVolumeType
          - Ec2InstanceUserName
      - Label:
          default: Biga Instance configuration
        Parameters:
          - BigaAmiId
          - BigaInstanceName
          - BigaInstanceType
      - Label:
          default: Other Parameters
        Parameters:
          - AllowedIP
          - CarlaVersion
Parameters:
  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: Ubuntu 20.04 (x86_64)
    Default: /aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id
  InstanceType:
    Type: String
    Description: Accelerated Instance Type ( https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/accelerated-computing-instances.html )
    AllowedValues:
      - g4dn.xlarge
      - g4dn.2xlarge
      - g4dn.4xlarge
      - g4dn.8xlarge
      - g4dn.12xlarge
      - g4dn.16xlarge
      - g5.xlarge
      - g5.2xlarge
      - g5.4xlarge
      - g5.8xlarge
      - g5.12xlarge
      - g5.16xlarge
    ConstraintDescription: Must contain valid instance type.
    Default: g5.16xlarge
  Ec2InstanceName:
    Description: Name of the EC2 instance hosting the Carla Simulator.
    Type: String
    Default: Ubuntu-CARLA-DCV
  Ec2InstanceVolumeType:
    Type: String
    Description: Volume Type ( https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html )
    AllowedValues:
      - gp2
      - gp3
    Default: gp3
  Ec2InstanceVolumeSize:
    Type: Number
    Description: Volume Size in GiBs (must be equal or larger than snapshot size)
    Default: 40
  Ec2InstanceUserName:
    Description: the OS username to be created on the Carla Simulator.
    Type: String
    Default: biga
  BigaAmiId:
    Type: AWS::EC2::Image::Id
    Description: The Biga ami image id
  BigaInstanceType:
    Type: String
    Description: Instance type for the biga image
    Default: t4g.micro
  BigaInstanceName:
    Type: String
    Description: Name of Biga Instance
    Default: Biga
  AllowedIP:
    Type: String
    Description: Allowed IP address to connect to CARLA/Biga via Security Group on port 8443
  CarlaVersion:
    Type: String
    Description: The Carla simulator version to be downloaded and installed
    Default: 0.9.13
  RepositoryURL:
    Type: String
    Description: The demo-iot-automotive-simulator github repository URL
    Default: https://github.com/adadouche/demo-iot-automotive-simulator
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - Biga VPC"
  VPCPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref VPC
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - Biga VPC Private Subnet 1"
  VPCPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      VpcId: !Ref VPC
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - Biga VPC Private Subnet 2"
  VPCPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [2, !GetAZs ""]
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - Biga VPC Public Subnet"
  VPCInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - Biga VPC Internet Gateway"
  VPCInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref VPCInternetGateway
  VPCPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - Biga VPC Public Route Table"
  VPCPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPCPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPCInternetGateway
  VPCPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPCPublicRouteTable
      SubnetId: !Ref VPCPublicSubnet
  VPCElasticIPNat:
    Type: AWS::EC2::EIP
    DependsOn: VPC
    Properties:
      Domain: VPC
  VPCNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt VPCElasticIPNat.AllocationId
      SubnetId: !Ref VPCPublicSubnet
  VPCPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - Biga VPC Private Route Table"
  VPCPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPCPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref VPCNatGateway
  VPCPrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPCPrivateSubnet1
      RouteTableId: !Ref VPCPrivateRouteTable
  VPCPrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPCPrivateSubnet2
      RouteTableId: !Ref VPCPrivateRouteTable

  BigaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Traffic From/To Carla & Biga instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: SSH
          FromPort: "22"
          ToPort: "22"
          CidrIp: 10.0.0.0/16
        - IpProtocol: udp
          Description: Ingress multicast traffic (UDP)
          FromPort: "0"
          ToPort: "65535"
          CidrIp: 10.0.0.0/16
        - IpProtocol: 2
          Description: IGMP Receivers
          CidrIp: 10.0.0.0/16
        - IpProtocol: 2
          Description: IGMP Querier
          CidrIp: 0.0.0.0/32
        - IpProtocol: tcp
          Description: external access - tcp - 8443
          FromPort: "8443"
          ToPort: "8443"
          CidrIp: !Ref AllowedIP
        - IpProtocol: udp
          Description: external access - udp - 8443
          FromPort: "8443"
          ToPort: "8443"
          CidrIp: !Ref AllowedIP
      SecurityGroupEgress:
        - IpProtocol: all
          Description: Egress multicast traffic (UDP)
          FromPort: "0"
          ToPort: "65535"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - Biga Security Group"

  Ec2InstanceCarlaSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: Simple secret created by AWS CloudFormation for the Ec2InstanceCarla.
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${Ec2InstanceUserName}"}'
        GenerateStringKey: password
        ExcludeCharacters: "`'\"@/\\;,"
        PasswordLength: 32

  Ec2InstanceCarlaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: dcvLicensing
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub arn:${AWS::Partition}:s3:::dcv-license.${AWS::Region}/*
        - PolicyName: secret
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetResourcePolicy
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecret*
                Resource: !Ref Ec2InstanceCarlaSecret
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}

  Ec2InstanceCarlaProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Ec2InstanceCarlaIamRole

  Ec2InstanceCarlaNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref VPCPublicSubnet
      Description: "Network interface for Ec2InstanceCarla"
      GroupSet:
        - !Ref BigaSecurityGroup

  Ec2InstanceBigaNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref VPCPublicSubnet
      Description: "Network interface for Ec2InstanceBiga"
      GroupSet:
        - !Ref BigaSecurityGroup

  Ec2InstanceCarla:
    Type: AWS::EC2::Instance
    DependsOn: Ec2InstanceCarlaSecret
    CreationPolicy:
      ResourceSignal:
        Timeout: PT90M
    Metadata:
      Comment: Install Desktop Environment
      AWS::CloudFormation::Init:
        config:
          files:
            # The cfn-hup.conf file stores the name of the stack and the AWS credentials that the cfn-hup daemon targets.
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                # The interval used to check for changes to the resource metadata in minutes. Default is 15
                interval=2
              mode: "000400"
              owner: "root"
              group: "root"
            # The user actions that the cfn-hup daemon calls periodically are defined in the hooks.conf configuration file.
            # To support composition of several applications deploying change notification hooks, cfn-hup supports a directory named hooks.d that is located in the hooks configuration directory. You can place one or more additional hooks configuration files in the hooks.d directory. The additional hooks files must use the same layout as the hooks.conf file.
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerHost --region ${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/usr/bin/setup-socketcan.sh":
              content: |
                #!/bin/bash
                set -euo pipefail

                if ! CANIF=`ip link | grep vcan0`; then
                    echo "no vcan adapter found, creating..."
                    ip link add dev vcan0 type vcan
                    ip link set up vcan0
                else
                    echo "vcan adapter found"
                fi

                while true; do
                    echo -n "`date -R` "
                    if ! CANIF=`ip link | grep ' can0'`; then
                        echo "no can adapter found"
                    else
                        if echo ${CANIF} | grep -q LOWER_UP; then
                            echo "can adapter is up"
                        else
                            echo "can adapter is down, setting up..."
                            ip link set up can0 txqueuelen 1000 type can bitrate 500000 restart-ms 100
                        fi
                    fi
                    sleep 1
                done
              mode: "000400"
              owner: "root"
              group: "root"
            "/lib/systemd/system/setup-socketcan.service":
              content: |
                [Unit]
                Description=Setup SocketCAN Service
                After=multi-user.target
                [Service]
                Type=simple
                Restart=always
                RestartSec=1
                ExecStart=/bin/bash /usr/bin/setup-socketcan.sh

                [Install]
                WantedBy=multi-user.target
              mode: "000400"
              owner: "root"
              group: "root"
          commands:
            01-apt-install:
              ignoreErrors: "false"
              command: |
                export DEBIAN_FRONTEND=noninteractive
                while apt-get upgrade -y | grep -q "Could not get lock" ; do echo "Waiting for other apt-get instances to exit"; sleep 1; done
                while sudo fuser /var/{lib/{dpkg,apt/lists},cache/apt/archives}/lock >/dev/null 2>&1; do echo "Waiting for other apt-get instances to exit"; sleep 1; done              
                add-apt-repository ppa:deadsnakes/ppa -y
                apt-get -qq -y update

                apt-get -qq -y install \
                    python3 \
                    python3-venv \
                    python3-pip \
                    python-is-python3 \
                    locales \
                    software-properties-common \
                    wget \
                    tmux \
                    unzip \
                    tar \
                    curl \
                    sed \
                    jq \
                    whois
            02-awscli-install:
              ignoreErrors: "false"
              command: !Sub |
                cd /tmp
                rm -f /tmp/awscliv2.zip
                if (uname -a | grep x86 1>/dev/null); then
                  curl -s https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
                else
                  curl -s https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip -o awscliv2.zip
                fi
                unzip -q -o awscliv2.zip
                ./aws/install --update -b /usr/bin

                rm -f /tmp/awscliv2.zip
            03-add-user:
              ignoreErrors: "false"
              command: !Sub |
                if [ -f /usr/sbin/useradd ]; then
                    COMMAND_ADD_USR='/usr/sbin/useradd'
                    COMMAND_CHG_PWD='chpasswd'
                elif [ -f /usr/sbin/adduser ]; then
                    COMMAND_ADD_USR='/usr/sbin/adduser'
                    COMMAND_CHG_PWD='chpasswd'
                else
                    exit 1
                fi              
                if [ $(getent group "${Ec2InstanceUserName}") ]; then
                  CREATE_USER_OPTS="-g ${Ec2InstanceUserName}"
                else
                  CREATE_USER_OPTS=''
                fi

                case "$OS_RELEASE" in
                    amzn.2*)
                        OS_ADMIN_GROUP='wheel'
                        ;;
                    *)
                        # Catch all without the full path for untested platforms
                        OS_ADMIN_GROUP='sudo'
                esac

                $COMMAND_ADD_USR $CREATE_USER_OPTS --comment "Local account for ${Ec2InstanceUserName}" "${Ec2InstanceUserName}" 

                mkdir -p /home/${Ec2InstanceUserName}
                chown -R ${Ec2InstanceUserName}:${Ec2InstanceUserName} /home/${Ec2InstanceUserName}

                OS_PASSWORD=$(aws --region "${AWS::Region}" secretsmanager get-secret-value --secret-id "${Ec2InstanceCarlaSecret}" --query 'SecretString' | jq -r '. | fromjson | .password')

                echo "${Ec2InstanceUserName}:$OS_PASSWORD" | $COMMAND_CHG_PWD

                usermod -a -G $OS_ADMIN_GROUP "${Ec2InstanceUserName}" -s /bin/bash
            04-create-venv:
              ignoreErrors: "false"
              command: !Sub |
                sudo -H -u ${Ec2InstanceUserName} bash -c "python -m venv ~/.venv-carla"
                sudo -H -u ${Ec2InstanceUserName} bash -c "git clone ${RepositoryURL} ~/demo-iot-automotive-simulator"
            05-nvidia-install:
              ignoreErrors: "false"
              command: |
                # NVIDIA Drivers installation
                apt-get -qq -y install ubuntu-drivers-common
                apt-get -qq -y install $(nvidia-detector)
                nvidia-xconfig --preserve-busid --enable-all-gpus
            06-dcv-install-prerequisites:
              ignoreErrors: "false"
              command: |
                # https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-prereq.html
                systemctl isolate graphical.target
                systemctl set-default graphical.target

                apt-get -qq -y install ubuntu-desktop \
                  gdm3 \
                  pulseaudio-utils \
                  libssl1.1 \
                  mesa-utils \
                  xserver-xorg-video-dummy

                # resolve "/var/lib/dpkg/info/nice-dcv-server.postinst: 8: dpkg-architecture: not found" when installing dcv-server
                apt-get -qq -y install dpkg-dev

                pip3 install crudini
                crudini --set /etc/gdm3/custom.conf "daemon" "WaylandEnable" "false"

                systemctl isolate multi-user.target && systemctl isolate graphical.target
            07-dcv-install:
              ignoreErrors: "false"
              command: |
                cd /tmp

                # https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-server.html
                wget -q https://d1uj6qtbmh3dt5.cloudfront.net/NICE-GPG-KEY
                gpg --import NICE-GPG-KEY

                # https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-server.html#linux-server-install

                rm -f /tmp/nice-dcv-*.tgz
                if ((uname -a | grep x86 1>/dev/null) && (cat /etc/os-release | grep 22.04 1>/dev/null)); then
                  wget -q https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-ubuntu2204-x86_64.tgz
                  tar -xzf nice-dcv-ubuntu*.tgz && cd nice-dcv-*-x86_64
                elif ((uname -a | grep x86 1>/dev/null) && (cat /etc/os-release | grep 18.04 1>/dev/null)); then
                  wget -q https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-ubuntu1804-x86_64.tgz
                  tar -xzf nice-dcv-ubuntu*.tgz && cd nice-dcv-*-x86_64
                elif (cat /etc/os-release | grep 18.04 1>/dev/null); then
                  wget -q https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-ubuntu1804-aarch64.tgz
                  tar -xzf nice-dcv-ubuntu*.tgz && cd nice-dcv-*-aarch64
                else
                  wget -q https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-ubuntu2004-x86_64.tgz
                  tar -xzf nice-dcv-ubuntu*.tgz && cd nice-dcv-*-x86_64
                fi

                apt-get -qq -y install ./nice-dcv-server_*.deb
                apt-get -qq -y install ./nice-dcv-web-viewer_*.deb
                usermod -aG video dcv
                apt-get -qq -y install ./nice-xdcv_*.deb
            08-dcv-configure:
              ignoreErrors: "false"
              command: !Sub |
                pip3 install crudini

                systemctl stop dcvserver

                cp /etc/dcv/dcv.conf /etc/dcv/dcv.conf.original

                # https://docs.aws.amazon.com/dcv/latest/adminguide/enable-quic.html
                crudini --set /etc/dcv/dcv.conf "security" "no-tls-strict" "true"

                crudini --set /etc/dcv/dcv.conf "connectivity" "enable-quic-frontend" "false"
                # crudini --set /etc/dcv/dcv.conf "connectivity" "enable-datagrams-display" "always-off"

                crudini --set /etc/dcv/dcv.conf "connectivity" "quic-listen-endpoints" "['0.0.0.0:8443', '[::]:8443']"
                crudini --set /etc/dcv/dcv.conf "connectivity" "quic-port" "8443"
                crudini --set /etc/dcv/dcv.conf "connectivity" "web-listen-endpoints" "['0.0.0.0:8443', '[::]:8443']"
                crudini --set /etc/dcv/dcv.conf "connectivity" "web-port" "8443"

                # crudini --set /etc/dcv/dcv.conf "session-management" "create-session" "false"
                # crudini --set /etc/dcv/dcv.conf "session-management/automatic-console-session" "owner" "ubuntu"

                # session storage: https://docs.aws.amazon.com/dcv/latest/userguide/using-transfer.html
                mkdir -p /home/${Ec2InstanceUserName}/DCV-Storage
                chown -R ${Ec2InstanceUserName}:${Ec2InstanceUserName} /home/ubuntu/DCV-Storage

                # https://docs.aws.amazon.com/dcv/latest/adminguide/managing-sessions-start.html#managing-sessions-start-manual
                tee /opt/dcv-virtual-session.sh > /dev/null << EOF
                #!/bin/bash
                dcvUser=${Ec2InstanceUserName}
                while true;
                do
                  if (/usr/bin/dcv list-sessions | grep \$dcvUser 1>/dev/null)
                  then
                    sleep 5
                  else
                    /usr/bin/dcv create-session demo --owner \$dcvUser --storage-root /home/\$dcvUser/DCV-Storage --type=virtual
                    /usr/bin/dcv list-sessions
                  fi
                done
                EOF

                tee /etc/systemd/system/dcv-virtual-session.service > /dev/null << EOF
                [Unit]
                Description=Create DCV virtual session for user ${Ec2InstanceUserName}
                After=default.target network.target
                [Service]
                ExecStart=/opt/dcv-virtual-session.sh
                [Install]
                WantedBy=default.target
                EOF

                chmod +x /opt/dcv-virtual-session.sh

                # text console: DCV virtual sessions only
                systemctl daemon-reload
                systemctl enable --now dcvserver
                systemctl enable --now dcv-virtual-session

                systemctl stop dcvserver
                systemctl stop dcv-virtual-session

                systemctl restart dcvserver
                systemctl restart dcv-virtual-session

                systemctl status dcvserver
                systemctl status dcv-virtual-session
            09-carla-install:
              ignoreErrors: "false"
              command: !Sub |
                apt-get -qq -y install \
                  libomp5 \
                  can-utils \
                  socat \
                  linux-modules-extra-$(uname -r)

                mkdir -p /opt/carla-simulator/
                cd /opt/carla-simulator/
                wget -q https://carla-releases.s3.us-east-005.backblazeb2.com/Linux/CARLA_${CarlaVersion}.tar.gz
                tar -xzf /opt/carla-simulator/CARLA_*.tar.gz -C /opt/carla-simulator/
                rm /opt/carla-simulator/CARLA_*.tar.gz

                chown -R ${Ec2InstanceUserName}:${Ec2InstanceUserName} /opt/carla-simulator

                sudo -H -u ${Ec2InstanceUserName} bash <<EOF
                source ~/.venv-carla/bin/activate
                python -m pip install --upgrade pip
                python -m pip install carla==${CarlaVersion}
                python -m pip install -r /opt/carla-simulator/PythonAPI/examples/requirements.txt

                python -m pip install \
                    opencv-python \
                    evdev
                EOF
            10-ros2-install:
              ignoreErrors: "false"
              command: !Sub |
                locale-gen en_US en_US.UTF-8
                update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
                export LANG=en_US.UTF-8

                add-apt-repository universe
                curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
                echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null

                export DEBIAN_FRONTEND=noninteractive
                while apt-get upgrade -y | grep -q "Could not get lock" ; do echo "Waiting for other apt-get instances to exit"; sleep 1; done
                while sudo fuser /var/{lib/{dpkg,apt/lists},cache/apt/archives}/lock >/dev/null 2>&1; do echo "Waiting for other apt-get instances to exit"; sleep 1; done
                apt-get -qq -y update

                apt-get -qq -y -f install ros-galactic-desktop python3-rosdep2 python3-colcon-common-extensions
                apt-get -qq -y -f install ros-galactic-ackermann-msgs

                sudo -H -u ${Ec2InstanceUserName} bash <<EOF
                source ~/.venv-carla/bin/activate

                ROS_DISTRO=galactic
                pip install  \
                  colcon-core \
                  colcon-common-extensions \
                  colcon-clean \
                  empy==3.3.4 \
                  catkin_pkg \
                  lark \
                  transforms3d 
                  
                export CARLA_ROOT=/opt/carla-simulator/
                export PYTHONPATH=$PYTHONPATH:$CARLA_ROOT/PythonAPI/carla/dist/carla-${CarlaVersion}-py3.7-linux-x86_64.egg:$CARLA_ROOT/PythonAPI/carla
                export PYTHONWARNINGS=ignore:::setuptools.command.install,ignore:::setuptools.command.easy_install,ignore:::pkg_resources
                source /opt/ros/galactic/setup.bash

                mkdir -p ~/ros2_ws/src && cd ~/ros2_ws/src
                git clone --recurse-submodules  https://github.com/astuff/astuff_sensor_msgs.git

                cd ~/ros2_ws
                colcon build --symlink-install

                source ~/ros2_ws/install/setup.bash
                rosdep update --include-eol-distros -q
                rosdep install --from-paths src --ignore-src -r -y -q

                git clone --recurse-submodules  https://github.com/carla-simulator/ros-bridge.git ~/ros2_ws/src/ros-bridge

                rosdep update --include-eol-distros -q

                cd ~/ros2_ws
                rosdep install --from-paths src --ignore-src -r -y -q
                colcon build --symlink-install

                source ~/ros2_ws/install/setup.bash
                rosdep install --from-paths src --ignore-src -r -y -q

                rosdep update --include-eol-distros -q

                EOF
            11-socketcan-install:
              ignoreErrors: "false"
              command: |
                systemctl start setup-socketcan
                systemctl enable setup-socketcan
            12-breeze-install:
              ignoreErrors: "false"
              command: !Sub |
                apt-get -qq -y install \
                    python3-pyqt5 \
                    pyqt5-dev-tools\
                    qttools5-dev-tools              
                sudo -H -u ${Ec2InstanceUserName} bash <<EOF
                source ~/.venv-carla/bin/activate
                pip install pyqt5
                EOF
            13-canigen-install:
              ignoreErrors: "false"
              command: !Sub |
                sudo -H -u ${Ec2InstanceUserName} bash <<EOF
                source ~/.venv-carla/bin/activate
                pip install \
                    cantools \
                    prompt_toolkit \
                    python-can \
                    can-isotp
                EOF
            14-firefox-install:
              ignoreErrors: "false"
              command: |
                # install firefox browser
                apt-get -qq -y install firefox
            15-finalize-install:
              ignoreErrors: "false"
              command: |
                # remove unsued package
                apt-get -qq -y autoremove

                # check all process are running
                ps -edf | grep dcv
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref Ec2InstanceCarlaProfile
      Monitoring: true
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref Ec2InstanceCarlaNetworkInterface
          DeviceIndex: "0"
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: !Ref Ec2InstanceVolumeType
            VolumeSize: !Ref Ec2InstanceVolumeSize
            DeleteOnTermination: true
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          export DEBIAN_FRONTEND=noninteractive
          while apt-get upgrade -y | grep -q "Could not get lock" ; do echo "Waiting for other apt-get instances to exit"; sleep 1; done
          while sudo fuser /var/{lib/{dpkg,apt/lists},cache/apt/archives}/lock >/dev/null 2>&1; do echo "Waiting for other apt-get instances to exit"; sleep 1; done
          add-apt-repository ppa:deadsnakes/ppa -y
          apt-get -qq -y update
          apt-get -qq -y install \
            python3 \
            python-is-python3 \
            python3-pip 

          python -m pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz

          # Start cfn-init
          cfn-init -v --stack ${AWS::StackName} --resource Ec2InstanceCarla --region ${AWS::Region} -c default
          STATUS=$?          

          # Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
          /opt/aws/bin/cfn-hup

          # cfn-init completed so signal success or not
          cfn-signal -e $STATUS --stack ${AWS::StackName} --resource Ec2InstanceCarla --region ${AWS::Region}

          # reboot for all the changes to take effect
          reboot
      Tags:
        - Key: Name
          Value: !Ref Ec2InstanceName
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}

  Ec2InstanceBiga:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref BigaAmiId
      InstanceType: !Ref BigaInstanceType
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref Ec2InstanceBigaNetworkInterface
          DeviceIndex: "0"
      Tags:
        - Key: Name
          Value: !Ref BigaInstanceName

  VPCMultiCastTransitGateway:
    Type: "AWS::EC2::TransitGateway"
    Properties:
      Description: "Transit Gateway for multicast"
      AmazonSideAsn: 64512
      AutoAcceptSharedAttachments: "enable"
      DefaultRouteTableAssociation: "enable"
      DefaultRouteTablePropagation: "enable"
      DnsSupport: "enable"
      MulticastSupport: "enable"
      VpnEcmpSupport: "enable"

  VPCMultiCastTransitGatewayAttachment:
    Type: "AWS::EC2::TransitGatewayAttachment"
    Properties:
      TransitGatewayId: !Ref VPCMultiCastTransitGateway
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref VPCPublicSubnet
        - !Ref VPCPrivateSubnet1
        - !Ref VPCPrivateSubnet2

  VPCMultiCastTransitGatewayDomain:
    Type: "AWS::EC2::TransitGatewayMulticastDomain"
    Properties:
      TransitGatewayId: !Ref VPCMultiCastTransitGateway
      Options:
        Igmpv2Support: "enable"

  VPCMultiCastTransitGatewayDomainAssociation0:
    Type: "AWS::EC2::TransitGatewayMulticastDomainAssociation"
    Properties:
      SubnetId: !Ref VPCPublicSubnet
      TransitGatewayAttachmentId: !Ref VPCMultiCastTransitGatewayAttachment
      TransitGatewayMulticastDomainId: !Ref VPCMultiCastTransitGatewayDomain

  VPCMultiCastTransitGatewayDomainAssociation1:
    Type: "AWS::EC2::TransitGatewayMulticastDomainAssociation"
    Properties:
      SubnetId: !Ref VPCPrivateSubnet1
      TransitGatewayAttachmentId: !Ref VPCMultiCastTransitGatewayAttachment
      TransitGatewayMulticastDomainId: !Ref VPCMultiCastTransitGatewayDomain

  VPCMultiCastTransitGatewayDomainAssociation2:
    Type: "AWS::EC2::TransitGatewayMulticastDomainAssociation"
    Properties:
      SubnetId: !Ref VPCPrivateSubnet2
      TransitGatewayAttachmentId: !Ref VPCMultiCastTransitGatewayAttachment
      TransitGatewayMulticastDomainId: !Ref VPCMultiCastTransitGatewayDomain

  VPCMultiCastTransitGatewayGroupMember1:
    Type: AWS::EC2::TransitGatewayMulticastGroupMember
    DependsOn: VPCMultiCastTransitGatewayDomainAssociation1
    Properties:
      GroupIpAddress: "239.255.0.1"
      NetworkInterfaceId: !Ref Ec2InstanceBigaNetworkInterface
      TransitGatewayMulticastDomainId: !Ref VPCMultiCastTransitGatewayDomain

  VPCMultiCastTransitGatewayGroupMember2:
    Type: AWS::EC2::TransitGatewayMulticastGroupMember
    DependsOn: VPCMultiCastTransitGatewayDomainAssociation2
    Properties:
      GroupIpAddress: "239.255.0.1"
      NetworkInterfaceId: !Ref Ec2InstanceCarlaNetworkInterface
      TransitGatewayMulticastDomainId: !Ref VPCMultiCastTransitGatewayDomain

Outputs:
  CarlaSimulatorInstanceID:
    Description: Carla Simulator EC2 Instance ID
    Value: !Ref Ec2InstanceCarla
  CarlaSimulatorSecret:
    Description: Carla Simulator OS user & password secret
    Value: !Ref Ec2InstanceCarlaSecret
  SSMSessionManagerURL:
    Description: SSM Session Manager access link
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${Ec2InstanceCarla}
  NICEDCVWebAccessConsoleURL:
    Description: NICE DCV Web Access Console
    Value: !Join
      - ""
      - - "https://"
        - !GetAtt
          - Ec2InstanceCarla
          - PublicDnsName
        - :8443
  NICEDCVClientConnectionString:
    Description: NICE DCV Client Connection String
    Value: !Join
      - ""
      - - !GetAtt
          - Ec2InstanceCarla
          - PublicDnsName
        - :8443
  NICEDCVClientDownloadURL:
    Description: DCV client download
    Value: https://download.nice-dcv.com
  CARLApath:
    Description: CARLA installation target path
    Value: /opt/carla-simulator/
